services:
  db:
    image: postgres
    container_name: db 
    restart: unless-stopped
    ports:
      - "${PGPORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${PGUSER:-postgres}
      POSTGRES_PASSWORD: ${PGPASSWORD:-postgres}
      POSTGRES_DB: ${PGDB:-postgres}
    volumes:
      - ${POSTGRES_DATA:-./postgres_data}:/var/lib/postgresql/data:rw
      # - ./dbscripts:/docker-entrypoint-initdb.d

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "${RABBITMQ_PORT_MANAGEMENT-15672}:15672"
      - "${RABBITMQ_PORT_AMQP:-5672}:5672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
    volumes:
      - ${RABBITMQ_DATA:-./rabbitmq_data}:/var/lib/rabbitmq:rw

  celery_worker:
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    image: ghcr.io/mkpipe-etl/mkpipe:latest
    container_name: celery_worker
    # restart: unless-stopped
    depends_on:
      - db
      - rabbitmq
    environment:
      - MKPIPE_PROJECT_DIR=/app
    volumes:
      - ./artifacts:/app/artifacts:rw
      - ./logs:/app/logs:rw
      - ./.env:/app/.env:ro
      - ./mkpipe_project.yaml:/app/mkpipe_project.yaml:ro
    command: sh -c "./celery.sh"

  flower:
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    image: ghcr.io/mkpipe-etl/mkpipe:latest
    container_name: flower_ui
    restart: unless-stopped
    depends_on:
      - db
      - rabbitmq
    environment:
      - MKPIPE_PROJECT_DIR=/app
      - RABBITMQ_HOST=${RABBITMQ_HOST:-localhost}
    volumes:
      - ./.env:/app/.env:ro
      - ./mkpipe_project.yaml:/app/mkpipe_project.yaml:ro
    command: sh -c "./flower.sh"
    ports:
      - "${FLOWER_PORT:-5555}:5555"

  mkpipe:
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    image: ghcr.io/mkpipe-etl/mkpipe:latest
    container_name: mkpipe
    depends_on:
      - db
      - rabbitmq
      - celery_worker
    environment:
      - MKPIPE_PROJECT_DIR=/app
    volumes:
      - ./artifacts:/app/artifacts:rw
      - ./logs:/app/logs:rw
      - ./.env:/app/.env:ro
      - ./mkpipe_project.yaml:/app/mkpipe_project.yaml:ro
      - ./mkpipe-cron:/etc/cron.d/mkpipe-cron:rw  # Mount the crontab file for scheduling
    command: >
      sh -c "mkpipe run && crontab /etc/cron.d/mkpipe-cron && cron && tail -f /app/logs/mkpipe_log.log"
