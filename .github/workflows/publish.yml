name: Build and Push Package

on:
  push:
    tags:
      - "v*"

jobs:
  build-and-push-pypi:
    name: Build PyPI Package and Push
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install build twine

      - name: Update version in setup.py
        id: update_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          sed -i "s/version='.*'/version='$VERSION'/" setup.py
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add setup.py
          git commit -m "Update version to $VERSION"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:main

      - name: Build package
        run: python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload dist/*

  # build-and-push-docker:
  #   name: Docker Image Build and Push
  #   runs-on: ubuntu-latest
  #   needs: [build-and-push-pypi]

  #   permissions:
  #     contents: write
  #     packages: write
  #     attestations: write
  #     id-token: write

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to GitHub Container Registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build Docker Image
  #       run: |
  #         REPO_NAME=$(basename ${{ github.repository }})
  #         IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$REPO_NAME
  #         TAG=${GITHUB_REF#refs/tags/}
  #         VERSION=${TAG#v}
  #         # Build with version tag and latest tag
  #         docker build -t $IMAGE_NAME:$VERSION -t $IMAGE_NAME:latest ./deploy/celery
  #         echo "image=$IMAGE_NAME:$VERSION" >> $GITHUB_ENV
  #         echo "image_latest=$IMAGE_NAME:latest" >> $GITHUB_ENV

  #     - name: Push Docker Image
  #       run: |
  #         docker push ${{ env.image }}
  #         docker push ${{ env.image_latest }}
